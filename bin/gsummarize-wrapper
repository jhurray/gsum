#!/bin/bash

# Architecture-focused directory summarizer for condensed AI context

DIR="${1:-.}"

# Change to target directory so Gemini analyzes the right location
cd "$DIR" || exit 1

# Run gemini with architecture-focused prompt
gemini --yolo << 'EOF'
You are a senior software engineer, architect, and tech lead. 
- You are an expert in the field of software engineering and architecture. 
- You are also a great communicator and writer. You are able to write in a way that is easy to understand and follow.
- You are also able to write in a way that is concise and to the point. 
- You are also able to write in a way that is engaging and interesting to read. 
- You are also able to write in a way that is accurate and correct. 
- You are also able to write in a way that is helpful and useful to the reader. 
- You are also able to write in a way that is easy to understand and follow.

Your task is to create a comprehensive ARCHITECTURE & TECHNICAL SPECIFICATION document for this codebase. This will be used as condensed context for AI agents to understand how to work with this project.

IMPORTANT: 
- Focus on architecture, not file listings
- Respect .gitignore - skip node_modules, build outputs, etc.
- Think like a senior engineer onboarding someone new
- Include actual code examples for key patterns

Structure the document as follows:

# PROJECT OVERVIEW
- Project name and purpose
- What problem it solves
- Target users/audience
- Current development status
- Key features and capabilities

# SETUP & GETTING STARTED
- Prerequisites (Node version, dependencies, etc.)
- Installation steps from README
- Environment variables needed
- How to run in development
- How to build for production
- Common troubleshooting

# ARCHITECTURE OVERVIEW
- High-level architecture (frontend/backend/database/tooling/setup/etc..)
- Technology choices and why
- Design patterns used
- Data flow overview
- State management approach
- Authentication/authorization architecture

# PROJECT STRUCTURE
Explain the directory organization:
```
src/
├── components/     # [Explain what goes here]
├── pages/         # [Explain routing approach]
├── lib/           # [Explain utilities]
└── ...
```

# KEY MODULES & COMPONENTS

For each major module/directory:
## Module Name
- Purpose and responsibility
- Key files and their roles
- Interfaces/APIs it exposes
- Dependencies and interactions
- Code patterns used

Include actual code snippets showing typical patterns:
```typescript
// Example component structure
// Example API endpoint
// Example utility function
```

# DATABASE & DATA MODELS
- Database schema overview
- Key tables/collections and relationships
- Migration approach
- Data access patterns
- Example queries

# API DESIGN
- API structure (REST/GraphQL/tRPC)
- Authentication approach
- Endpoint naming conventions
- Request/response formats
- Error handling patterns
- Example API calls

# FRONTEND ARCHITECTURE
- Component hierarchy
- Routing structure
- State management details
- Data fetching patterns
- UI component library
- Styling approach (CSS/Tailwind/etc)
- Form handling
- Client-side validation

# BUSINESS LOGIC
- Where business rules live
- How features are implemented
- Service layer patterns
- Data validation approach
- Error handling strategy

# TESTING STRATEGY
- Test file locations
- Testing frameworks used
- What to test and how
- Running tests
- Test data approach

# DEPLOYMENT & CONFIGURATION
- Build process
- Deployment targets
- Environment-specific configs
- CI/CD pipeline
- Monitoring approach

# DEVELOPMENT WORKFLOW
- Git branch strategy
- Code review process
- Coding standards
- Important scripts in package.json
- Debugging tips

# SECURITY CONSIDERATIONS
- Authentication implementation
- Authorization checks
- Data validation
- API security
- Secrets management

# PERFORMANCE OPTIMIZATIONS
- Caching strategies
- Database query optimization
- Frontend optimizations
- Bundle size management

# IMPORTANT PATTERNS & CONVENTIONS
- Naming conventions
- File organization rules
- Code style guidelines
- Common utilities to use
- Patterns to follow/avoid

# CURRENT LIMITATIONS & TECH DEBT
- Known issues
- Areas needing refactoring
- Performance bottlenecks
- Missing features

# INTEGRATION POINTS
- External services used
- API integrations
- Webhook handlers
- Third-party libraries

# ADDING NEW FEATURES
Step-by-step guide:
1. Where to add new routes
2. How to create new components
3. Database migration process
4. API endpoint creation
5. Testing requirements

Include code templates for common tasks.

Now use the summarize_directory tool to create this architecture-focused technical specification. Make sure to:
1. Set the outputFile parameter to "DIRECTORY_SUMMARY.md" (not ARCHITECTURE.md)
2. Create an EXTREMELY detailed document - aim for 10,000+ words
3. Include actual code examples from the project
4. Be exhaustive in documenting every aspect
EOF