#!/bin/bash
# Validate that gsum commands work properly

echo "🔍 Validating gsum commands..."
echo ""

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check command
check_command() {
    local cmd="$1"
    local description="$2"
    
    echo -n "Checking $cmd... "
    
    if command -v "$cmd" >/dev/null 2>&1; then
        echo -e "${GREEN}✓${NC} Found at: $(command -v "$cmd")"
        return 0
    else
        echo -e "${RED}✗${NC} NOT FOUND"
        return 1
    fi
}

# Function to test command execution
test_command() {
    local cmd="$1"
    local args="$2"
    local expected_output="$3"
    
    echo -n "Testing: $cmd $args... "
    
    # Create a temp directory for testing
    local test_dir=$(mktemp -d)
    cd "$test_dir" || exit 1
    
    # Create minimal test structure
    mkdir -p src
    echo "# Test Project" > README.md
    echo "console.log('test');" > src/index.js
    
    # Run command and capture output
    local output
    output=$($cmd $args 2>&1)
    local exit_code=$?
    
    # Check for expected output or success
    if [ $exit_code -eq 0 ] || [[ "$output" == *"$expected_output"* ]]; then
        echo -e "${GREEN}✓${NC}"
        # Clean up
        cd - >/dev/null
        rm -rf "$test_dir"
        return 0
    else
        echo -e "${RED}✗${NC}"
        echo "  Output: $output"
        echo "  Exit code: $exit_code"
        # Clean up
        cd - >/dev/null
        rm -rf "$test_dir"
        return 1
    fi
}

# Check all required commands
echo "=== Command Availability ==="
check_command "smart-gsum" "Main gsum script"
check_command "gsummarize-wrapper" "Gemini wrapper script"
check_command "gsum-debug-wrapper" "Debug wrapper"

echo ""
echo "=== Testing Command Execution ==="

# Test smart-gsum help
test_command "smart-gsum" "--help" "Usage:"

# Test debug wrapper
test_command "gsum-debug-wrapper" "gsum --help" "Debug log saved to:"

echo ""
echo "=== Checking Claude Commands ==="

for cmd in gsum gsum-save gsum-plan; do
    if [ -f "$HOME/.claude/commands/${cmd}.md" ]; then
        echo -e "${GREEN}✓${NC} /claude/commands/${cmd}.md exists"
        
        # Check if it contains debug logging
        if grep -q "Debug logging" "$HOME/.claude/commands/${cmd}.md"; then
            echo -e "  ${GREEN}✓${NC} Contains debug logging"
        else
            echo -e "  ${YELLOW}⚠${NC} Missing debug logging"
        fi
        
        # Check if it contains smart-gsum
        if grep -q "smart-gsum" "$HOME/.claude/commands/${cmd}.md"; then
            echo -e "  ${GREEN}✓${NC} References smart-gsum"
        else
            echo -e "  ${RED}✗${NC} Does not reference smart-gsum"
        fi
    else
        echo -e "${RED}✗${NC} /claude/commands/${cmd}.md NOT FOUND"
    fi
done

echo ""
echo "=== Checking Debug Logs ==="

if [ -d "$HOME/.gsum-debug" ]; then
    echo -e "${GREEN}✓${NC} Debug directory exists"
    
    # Count log files
    log_count=$(find "$HOME/.gsum-debug" -name "*.log" | wc -l)
    echo "  Found $log_count debug log files"
    
    # Show latest log if exists
    if [ -f "$HOME/.gsum-debug/latest.log" ]; then
        latest_log=$(cat "$HOME/.gsum-debug/latest.log")
        echo "  Latest log: $latest_log"
    fi
else
    echo -e "${YELLOW}⚠${NC} Debug directory does not exist yet"
fi

echo ""
echo "=== Summary ==="
echo "Run this script after using /gsum commands in Claude to check for issues."
echo "Debug logs are saved to: $HOME/.gsum-debug/"